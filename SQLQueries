Select*
From NashVilleHousing.dbo.Nash

-- Standardize Date Format
Select SaleDate, CONVERT(Date,SaleDate)
From Nash

Update Nash
Set SaleDate = CONVERT(Date,SaleDate)

Select SaleDate
From Nash

ALTER TABLE Nash
Add SaleDateConverted Date

Update Nash
SET SaleDateConverted = CONVERT(Date,SaleDate)

Select SaleDateConverted
From Nash

-- Property Address Data
Select *
From Nash
Where PropertyAddress is null

Select *
From Nash
Order by ParcelID

Select a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress
From Nash a
Join Nash b
on a.ParcelID = b.ParcelID
and a.UniqueID <> b.UniqueID
Where a.PropertyAddress is null

Select a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, ISNULL(a.PropertyAddress, b.PropertyAddress)
From Nash a
Join Nash b
on a.ParcelID = b.ParcelID
and a.UniqueID <> b.UniqueID
Where a.PropertyAddress is null

-- Update
Update a
Set PropertyAddress = ISNULL(a.PropertyAddress, b.PropertyAddress)
From Nash a
Join Nash b
on a.ParcelID = b.ParcelID

-- Breaking out address into individual columns (Address, City, State)
Select PropertyAddress
From Nash

-- Separate Street Address part from the rest of the address like city, state, zip
SELECT
SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress)) AS Address
FROM Nash

SELECT
SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress)) AS Address, CHARINDEX(',', PropertyAddress)
FROM Nash

SELECT
SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1) AS Address
FROM Nash

SELECT
SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1) AS Address, SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) +1, LEN(PropertyAddress)) AS Address
FROM Nash

ALTER TABLE Nash
ADD PropertySplitAddress NVARCHAR(255)

UPDATE Nash
SET PropertySplitAddress = SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress)-1)

ALTER TABLE Nash
ADD PropertySplitCity nvarchar(255)

UPDATE Nash
SET PropertySplitCity = SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress)+1, LEN(PropertyAddress))

SELECT*
FROM Nash

-- Owner Address
-- Parse name

SELECT OwnerAddress
FROM Nash

SELECT
PARSENAME(REPLACE(OwnerAddress, ',', '.'), 3)
,PARSENAME(REPLACE(OwnerAddress, ',', '.'), 2)
,PARSENAME(REPLACE(OwnerAddress, ',', '.'), 1)
FROM Nash

ALTER TABLE Nash
ADD OwnerSplitAddress NVARCHAR(255)

UPDATE Nash
SET OwnerSplitAddress = PARSENAME(REPLACE(OwnerAddress, ',', '.'), 3)

ALTER TABLE Nash
ADD OwnerSplitCity nvarchar(255)

UPDATE Nash
SET OwnerSplitCity = PARSENAME(REPLACE(OwnerAddress, ',', '.'), 2)

ALTER TABLE Nash
ADD OwnerSplitState nvarchar(255)

UPDATE Nash
SET OwnerSplitState = PARSENAME(REPLACE(OwnerAddress, ',', '.'), 1)

SELECT *
FROM Nash

-- Change Y and N to Yes and No in Sold as vacant
SELECT DISTINCT (SoldAsVacant), COUNT(SoldAsVacant)
FROM Nash
GROUP BY SoldAsVacant
ORDER BY 2

SELECT SoldAsVacant
, CASE WHEN SoldAsVacant = 'Y' THEN 'Yes'
WHEN SoldAsVacant = 'N' THEN 'No'
ELSE SoldAsVacant
END
FROM Nash

-- Removing Duplicates
-- Finding and filtering duplicates
SELECT*,
ROW_NUMBER() OVER (PARTITION BY ParcelID, PropertyAddress, SalePrice, SaleDate, LegalReference ORDER BY UniqueID) row_num
FROM Nash
-- Using a CTE because we can't use WHERE row_num>1 statement on the previous query
WITH RowNumCTE AS
(
SELECT*,
ROW_NUMBER() OVER (PARTITION BY ParcelID, PropertyAddress, SalePrice, LegalReference ORDER BY UniqueID) row_num
FROM Nash
)
SELECT*
FROM ROWNumCTE
WHERE row_num > 1
ORDER BY PropertyAddress

-- Deleting duplicate rows
WITH RowNumCTE AS
(
SELECT*,
ROW_NUMBER() OVER (PARTITION BY ParcelID, PropertyAddress, SalePrice, LegalReference ORDER BY UniqueID) row_num
FROM Nash
)
DELETE
FROM RowNumCTE
WHERE row_num > 1

-- Deleting unused columns
ALTER TABLE Nash
DROP COLUMN OwnerAddress, TaxDistrict, PropertyAddress

SELECT*
FROM Nash

ALTER TABLE Nash
DROP COLUMN SaleDate
